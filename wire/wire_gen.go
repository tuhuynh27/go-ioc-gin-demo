// File: wire_gen.go
// Code generated by Go IoC. DO NOT EDIT.
//go:generate go run github.com/tuhuynh27/go-ioc/cmd/iocgen --dir=../
package wire

import (
    "tuhuynh.com/go-ioc-gin-example/cache"
    "tuhuynh.com/go-ioc-gin-example/config"
    "tuhuynh.com/go-ioc-gin-example/controllers"
    "tuhuynh.com/go-ioc-gin-example/core"
    "tuhuynh.com/go-ioc-gin-example/logger"
    "tuhuynh.com/go-ioc-gin-example/migrations"
    "tuhuynh.com/go-ioc-gin-example/repositories"
    "tuhuynh.com/go-ioc-gin-example/security"
    "tuhuynh.com/go-ioc-gin-example/services"
)

type Container struct {
    LRUCache *cache.LRUCache
    RedisMock *cache.RedisMock
    Config *config.Config
    HealthCheck *core.HealthCheck
    TodoCrudRepositoryMock *repositories.TodoCrudRepositoryMock
    RateLimiter *security.RateLimiter
    RedisCache *cache.RedisCache
    TodoCrudRepositorySql *repositories.TodoCrudRepositorySql
    TodoServiceImpl *services.TodoServiceImpl
    TodoController *controllers.TodoController
    ZapLogger *logger.ZapLogger
    Runner *migrations.Runner
    Application *core.Application
}

func Initialize() (*Container, func()) {
    container := &Container{}
    
    container.LRUCache = cache.NewLRUCache()
    
    container.RedisMock = &cache.RedisMock{}
    
    container.Config = config.NewConfig()
    
    container.HealthCheck = &core.HealthCheck{}
    
    container.TodoCrudRepositoryMock = &repositories.TodoCrudRepositoryMock{}
    
    container.RateLimiter = &security.RateLimiter{}
    container.RateLimiter.PostConstruct()
    
    container.RedisCache = &cache.RedisCache{
        Config: container.Config,
    }
    
    container.TodoCrudRepositorySql = &repositories.TodoCrudRepositorySql{
        Config: container.Config,
    }
    
    container.TodoServiceImpl = &services.TodoServiceImpl{
        Repository: container.TodoCrudRepositorySql,
        Cache: container.RedisCache,
    }
    
    container.TodoController = &controllers.TodoController{
        Service: container.TodoServiceImpl,
        RateLimiter: container.RateLimiter,
    }
    
    container.ZapLogger = logger.NewZapLogger(container.Config)
    
    container.Runner = &migrations.Runner{
        Log: container.ZapLogger,
        Config: container.Config,
    }
    
    container.Application = &core.Application{
        Config: container.Config,
        Log: container.ZapLogger,
        HealthCheck: container.HealthCheck,
        TodoController: container.TodoController,
        MigrationRunner: container.Runner,
    }

    cleanup := func() {
        container.ZapLogger.PreDestroy()
        container.Config.PreDestroy()
    }

    return container, cleanup
}